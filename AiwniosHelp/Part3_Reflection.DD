$WW,1$$FG,5$$TX+CX,"Runtime Part 3: Meta-data and Reflection"$$FD$

  HolyC is a mainly just in time language. This means when the code gets compiled,the information about the code is still in memory. This is great for having the code reflect on itself and saves a lot of time doing meanial things like serializing a class. The primary way to do this is via $FG,4$MetaData$FD$. This means data about the self.

  To get the metadata of a class out of the compiler,we must use the $HL,1$CTask$HL,0$'s hash table and do these steps
 
$TR-C,"Step 1"$
$ID,2$
Lookup the class by it's name $HL,1$CHashClass *findc=HashFind(cls,Fs->hash_table,HTT_CLASS);$HL,0$
$ID,-2$
$TR-C,"Step 2"$
$ID,2$
Lookup the class by it's name $HL,1$CMemberLst *member=MemberFind("member_name",findc);$HL,0$
$ID,-2$
$TR-C,"Step 3"$
$ID,2$
Lookup the meta data $HL,1$I64 meta_data=MemberMeta("META_DATA",member);$HL,0$
$ID,-2$


Perhaps an example will help:
$HL,1$
$BG,7$class CMeta {
  I64 a fmt "A:%d\n";
  I64 b fmt "B:%d\n";
  F64 c fmt "C:%n\n";
};
CMeta abc={1,2,3};
U0 Main(U8 *ptr,U8 *cls=lastclass) {
  CHashClass *findc=HashFind(cls,Fs->hash_table,HTT_CLASS);
  CMemberLst *ml;
  U64 sf;
  if(!findc) return;
  ml=MemberFind("a",findc);
  sf=(ptr+ml->offset)[0](U64);
  if(MemberMetaFind("fmt",ml)) {
    Print(MemberMetaData("fmt",ml),sf);
  } 
}
Main(&abc); //Here we use lastclass to get the class of abc
$BD$$HL,0$

  If you want to make a form using meta data,you can use $HL,1$PopUpForm$HL,0$

$HL,1$
$BG,7$class CInput {
  //Be sure to use -P with strings
  U8 name[STR_LEN] format "$$DA-P,\"Name:%s\"$$\n";
  I64 age format "$$DA-TRM,\"Age:%d\"$$\n";
  Bool is_tall format "$$DA-TRM,\"is_tall:%d\"$$\n";
};
CInput inp;
PopUpForm(&inp);
"%s is %d years old\n",inp.name,inp.age;
if(inp.is_tall)
  "Tall!\n";
